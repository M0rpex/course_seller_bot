from tgbot.loader import dp
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram import types

from tgbot.database.db_logging import get_userx, update_userx
from tgbot.buttons.reply_all import user_main_btn


@dp.message_handler(commands=['start'], state="*")
async def user_start(msg: Message, state: FSMContext):
    await state.finish()

    start_param = msg.get_args()

    if get_userx(user_id=msg.from_user.id)['contact_name'] is None or get_userx(user_id=msg.from_user.id)[
        'contact_phone_number'] is None:
        await msg.answer('–ü—Ä–∏–≤—ñ—Ç –ª—é–±–∞ üåπ\n'
                         '–î—è–∫—É—é –∑–∞ –¥–æ–≤—ñ—Ä—É —Ç–∞ –≤—ñ—Ç–∞—é —Ç–µ–±–µ –≤ —Å–≤–æ—î–º—É –ø—Ä–æ—Å—Ç–æ—Ä—ñ ü´∂\n'
                         '–¶–µ–π –ø—Ä–æ–µ–∫—Ç, —è–∫–∏–π —Å—Ç–∞–Ω–µ —Ç–≤–æ—î—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é, –æ–ø–æ—Ä–æ—é —ñ —à–ª—è—Ö–æ–º –¥–æ —Å–ø—Ä–∞–≤–∂–Ω—å–æ—ó —Å–µ–±–µ ü§ó')
        await msg.answer('–Ø–∫ —Ç–µ–±–µ –∑–≤—É—Ç—å?', reply_markup=user_main_btn(msg.from_user.id))
        await state.set_state('get_name_state')

    elif start_param:
        await msg.answer('1')
    else:
        name = '–∫—Ä–∞—Å—É–Ω—è' if get_userx(user_id=msg.from_user.id)['contact_name'] is None else \
            get_userx(user_id=msg.from_user.id)['contact_name']
        await msg.answer(
            f'–ü—Ä–∏–≤—ñ—Ç {name}! –¶–µ @aprilparadise –ú–∏ –≤–∂–µ –ø–æ–∑–Ω–∞–π–æ–º–∏–ª–∏—Å—å, –∞ –æ—Ç–∂–µ –º–æ–∂–µ–º–æ –π—Ç–∏ –¥–∞–ª—ñ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±—É–¥–µ –¥–æ–ø–æ–º–æ–≥–∞ - –Ω–∞—Ç–∏—Å–∫–∞–π "–Ñ –ø–∏—Ç–∞–Ω–Ω—è?" —Ç–∞ –º–æ—ó —Ñ–µ—ó –ø–æ–ø—ñ–∫–ª—É—é—Ç—å—Å—è –ø—Ä–æ —Ç–µ–±–µ',
            reply_markup=user_main_btn(msg.from_user.id))


@dp.message_handler(state="get_name_state")
async def get_name(msg: Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton('–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É', request_contact=True)
    keyboard.add(btn)

    name = msg.text

    try:
        update_userx(msg.from_user.id, contact_name=name)
        await msg.answer('–¢–µ–ø–µ—Ä –∑–∞–ª–∏—à —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É(–ü–æ—á–∏–Ω–∞—é—á–∏ –∑ 0, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥—É)',
                         reply_markup=keyboard)
        await state.set_state('wait_number_state')
    except Exception as e:
        await msg.answer('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state="wait_number_state")
@dp.message_handler(content_types=types.ContentType.CONTACT, state="wait_number_state")
async def handle_contact(msg: Message, state: FSMContext):
    contact = msg.contact

    if contact is None:
        if len(msg.text) == 10:
            try:
                update_userx(msg.from_user.id, contact_phone_number=msg.text)
                update_userx(msg.from_user.id, alarm_time=None)
                name = '–∫—Ä–∞—Å—É–Ω—è' if get_userx(user_id=msg.from_user.id)['contact_name'] is None else \
                    get_userx(user_id=msg.from_user.id)['contact_name']

                await msg.answer(
                    f'–ü—Ä–∏–≤—ñ—Ç {name}! –¶–µ @aprilparadise –ú–∏ –≤–∂–µ –ø–æ–∑–Ω–∞–π–æ–º–∏–ª–∏—Å—å, –∞ –æ—Ç–∂–µ –º–æ–∂–µ–º–æ –π—Ç–∏ –¥–∞–ª—ñ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±—É–¥–µ –¥–æ–ø–æ–º–æ–≥–∞ - –Ω–∞—Ç–∏—Å–∫–∞–π "–Ñ –ø–∏—Ç–∞–Ω–Ω—è?" —Ç–∞ –º–æ—ó —Ñ–µ—ó –ø–æ–ø—ñ–∫–ª—É—é—Ç—å—Å—è –ø—Ä–æ —Ç–µ–±–µ',
                    reply_markup=user_main_btn(msg.from_user.id))
                await state.finish()
            except Exception:
                await msg.answer('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞')
        else:
            await msg.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 10 —Ü–∏—Ñ—Ä.(–§–æ—Ä–º–∞—Ç: 0XXXXXXXXX)')
    else:
        try:
            update_userx(msg.from_user.id, contact_phone_number=contact.phone_number)
            update_userx(msg.from_user.id, alarm_time=None)
            name = '–∫—Ä–∞—Å—É–Ω—è' if get_userx(user_id=msg.from_user.id)['contact_name'] is None else \
                get_userx(user_id=msg.from_user.id)['contact_name']

            await msg.answer(
                f'–ü—Ä–∏–≤—ñ—Ç {name}! –¶–µ @aprilparadise –ú–∏ –≤–∂–µ –ø–æ–∑–Ω–∞–π–æ–º–∏–ª–∏—Å—å, –∞ –æ—Ç–∂–µ –º–æ–∂–µ–º–æ –π—Ç–∏ –¥–∞–ª—ñ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±—É–¥–µ –¥–æ–ø–æ–º–æ–≥–∞ - –Ω–∞—Ç–∏—Å–∫–∞–π "–Ñ –ø–∏—Ç–∞–Ω–Ω—è?" —Ç–∞ –º–æ—ó —Ñ–µ—ó –ø–æ–ø—ñ–∫–ª—É—é—Ç—å—Å—è –ø—Ä–æ —Ç–µ–±–µ',
                reply_markup=user_main_btn(msg.from_user.id))
            await state.finish()
        except Exception:
            await msg.answer('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞')
